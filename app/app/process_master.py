import json
from folder_create import Create
 
class Proces_Shape_Master():
    NAME_FOLDER_SAVE_DATA_MASTER = "Master_Regulations"
    NAME_FILE_SAVE_MASTER_REGULATIONS = "data_regulations.json"
    NAME_FOLDER_STATIC = "static"

    def __init__(self):
        self.object_folder = Create()
        self.path_save = self.init_file()
        self.list_regulations = self.get_file_data_json()    #Nh·ªØng c√°i n√†o thay ƒë·ªïi file trong data th√¨ ph·∫£i load l·∫°i d·ªØ li·ªáu cho   self.list_regulations 
    def init_file(self):
        return self.object_folder.get_path_grandaugter(
            Proces_Shape_Master.NAME_FILE_SAVE_MASTER_REGULATIONS,
            Proces_Shape_Master.NAME_FOLDER_SAVE_DATA_MASTER,
            Proces_Shape_Master.NAME_FOLDER_STATIC
        )

    def get_file_data_json(self):
        data = self.object_folder.get_data_in_path(self.path_save)
        return data if data else {}

    def save_shapes_to_json(self, type_id: str, data_master):
        if not self.path_save:
            print("L∆∞u th·∫•t b·∫°i: ƒë∆∞·ªùng d·∫´n t·ªõi file kh√¥ng t·ªìn t·∫°i")
            return False
        self.list_regulations = self.get_file_data_json() or {}
        self.list_regulations[type_id] = data_master
        with open(self.path_save, 'w', encoding='utf-8') as f:
            json.dump(self.list_regulations, f, ensure_ascii=False, indent=4)
        return True
    def update_data(self):
        try:
            if not self.path_save:
                print("L∆∞u th·∫•t b·∫°i: ƒë∆∞·ªùng d·∫´n t·ªõi file kh√¥ng t·ªìn t·∫°i")
                return False
            with open(self.path_save, 'w', encoding='utf-8') as f:
                json.dump(self.list_regulations, f, ensure_ascii=False, indent=4)
            return True
        except:
            print("L·ªói update data")
            return False

    def check_all_rules(self, data_sp: dict) -> bool:
            """
            Ki·ªÉm tra to√†n b·ªô d·ªØ li·ªáu c·ªßa 1 s·∫£n ph·∫©m (vd: data["SP01"]).
            Rule:
            1. M·ªói shape ph·∫£i c√≥ t√™n (ten_hinh_min) v√† kh√¥ng r·ªóng.
            2. Trong 1 frame, c√°c t√™n kh√¥ng ƒë∆∞·ª£c tr√πng nhau.
            """
            all_ok = True

            for frame_id, frame_data in data_sp.items():
                print(f"\nüîç Ki·ªÉm tra Frame {frame_id}:")
                shapes = frame_data.get("shapes", [])

                # l·∫•y t·∫•t c·∫£ t√™n min
                names = []
                for idx, shape in enumerate(shapes):
                    name = str(shape.get("ten_hinh_min", "")).strip()
                    if not name:
                        print(f"‚ùå Frame {frame_id}: Shape #{idx+1} thi·∫øu ho·∫∑c r·ªóng 'ten_hinh_min'")
                        all_ok = False
                    names.append(name)

                # ki·ªÉm tra tr√πng l·∫∑p
                duplicates = [n for n in set(names) if names.count(n) > 1 and n]
                if duplicates:
                    print(f"‚ùå Frame {frame_id}: T√™n Min b·ªã tr√πng -> {duplicates}")
                    all_ok = False
                else:
                    print(f"‚úÖ Frame {frame_id}: Kh√¥ng c√≥ t√™n Min tr√πng.")

            print("\nüìå T·ªïng k·∫øt:", "‚úÖ T·∫•t c·∫£ h·ª£p l·ªá" if all_ok else "‚ùå C√≥ l·ªói trong d·ªØ li·ªáu")
            return all_ok
    def get_list_id_master(self):
        """Tr·∫£ v·ªÅ None n·∫øu trong file kh√¥ng c√≥ d·ªØ li·ªáu n√†o tr·∫£ v·ªÅ danh s√°ch d·ªØ li·ªáu c√≥ trong file"""
        if self.list_regulations:
            return [i for i in self.list_regulations]
    def get_data_is_id(self,ID:str):
        """Tr·∫£ v·ªÅ data master regulation c√≥ ID l√† id tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y ID """
        list_ID =  self.get_list_id_master()
        if not list_ID:
            print("Kh√¥ng c√≥ ID n√†o t·ªìn t·∫°i c√≥ th·ªÉ File r·ªóng") 
            return None
        if ID in list_ID :
            print(self.list_regulations[ID])
            return self.list_regulations[ID]  
        else:
            print("ID s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu regulation")
            return None
    def erase_product_master(self,ID:str):
        """H√†m n√†y th·ª±c hi·ªán x√≥a master c√≥ ID l√†"""
        ID = ID.strip()
        if self.list_regulations:
            list_key = self.get_list_id_master()
            if ID in list_key:
                print("T√¨m th·∫•y ID th·ª±c hi·ªán x√≥a")
                status_erase = self.list_regulations.pop(ID,None)
                status_save  = self.update_data()
                if status_erase is not None  and status_save != False:
                    print("X√≥a th√†nh c√¥ng s·∫£n ph·∫©m c√≥ ID:",status_erase)
                    return True
                else:
                    print("X√≥a kh√¥ng th√†nh c√¥ng s·∫£n ph·∫©m c√≥ ID=",ID)
                    return False
            else:
                print("Kh√¥ng t√¨m th·∫•y ID ƒë√≥ trong s·∫£n ph·∫©m")
                return False
    def erase_master_index(self,ID:str,index):
        """H√†m n√†y th·ª±c hi·ªán x√≥a index th·ª© bao nhi√™u trong 1 ID"""
        
        pass  
            
# shape = Proces_Shape_Master()
# print(shape.get_list_id_master())

# shape = Proces_Shape_Master()
# shape.get_data_is_id("SP03")

# shape = Proces_Shape_Master()
# shape.erase_product_master("SP02")

# data =shape.get_file_data_json()
# ok = shape.check_all_rules(data["SP01"])
# print("K·∫æT LU·∫¨N CHUNG:", ok)