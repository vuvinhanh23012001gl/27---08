
import time 
import serial.tools.list_ports
from folder_create import Create
from common_value import NAME_FOLDER_CONFIG
class Serial_Com:
    folder = Create()
    NAME_FILE_CONFIG = "config_com.json"
    path_config = folder.get_or_create_json(NAME_FILE_CONFIG,NAME_FOLDER_CONFIG)
    def __init__(self):
        self.baud_rate = None
        self.parity = None
        self.stop_bits = None
        self.byte_size = None
        self.timeout = None
        self.reconnect_interval = None
        self.serial_com   = None

        self.ser = None 
        self.port = None  
      

        self.init()
    def init(self):
        data = Serial_Com.folder.read_json_from_file(Serial_Com.path_config)
        if data:
            self.serial_com = data.get("device_name",None)
            self.baud_rate = data.get("baudrate", 115200)
            self.parity = data.get("parity", "N")
            self.stop_bits = data.get("stopbits", 1)
            self.byte_size = data.get("bytesize", 8)
            self.timeout = data.get("timeout", 1.0)
            self.reconnect_interval = data.get("reconnect_interval", 1.0)
            print("üîß C·∫•u h√¨nh Serial:")
            print("  device_name       :", self.serial_com)
            print("  baudrate          :", self.baud_rate)
            print("  parity            :", self.parity)
            print("  stopbits          :", self.stop_bits)
            print("  bytesize          :", self.byte_size)
            print("  timeout           :", self.timeout)
            print("  reconnect_interval:", self.reconnect_interval)
        else:
            print("D·ªØ li·ªáu r·ªóng ho·∫∑c kh√¥ng th·ªÉ ƒë·ªçc t·ª´ file.")
            print("Y√™u c·∫ßu ch·ªçn c·∫•u h√¨nh t·ª´ file ")

        # config = self.read_file_config(self.path_config)
        # if config:
        #     self.baud_rate = config.get("baudrate", 115200)
        #     self.parity = config.get("parity", "N")
        #     self.stop_bits = config.get("stopbits", 1)
        #     self.byte_size = config.get("bytesize", 8)
        #     self.timeout = config.get("timeout", 1.0)
        # else:
        #     print("Kh√¥ng th·ªÉ ƒë·ªçc c·∫•u h√¨nh t·ª´ file.")
    def find_port_by_description(self, description):
        ports = serial.tools.list_ports.comports()
        for port in ports:
            # print(port.description)
            if description in port.description:
                self.port = port.device
                # print(f"ƒê√£ t√¨m th·∫•y c·ªïng: {self.port}")
                return self.port
        return None
    def open_port_external(self, port: str,
                baudrate: int = 115200,
                bytesize: int = 8,
                parity: str = "N",
                stopbits: int = 1,
                timeout: float = 1.0) -> bool:
        """
        M·ªü c·ªïng serial v·ªõi c√°c tham s·ªë truy·ªÅn t·ª´ b√™n ngo√†i.
        Tr·∫£ v·ªÅ True n·∫øu m·ªü th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
        """
        if port and self.ser is None:
            try:
                print(f"üîå Ti·∫øn h√†nh m·ªü c·ªïng {port}")
                self.ser = serial.Serial(
                    port=port,
                    baudrate=baudrate,
                    bytesize=bytesize,
                    parity=parity,
                    stopbits=stopbits,
                    timeout=timeout
                )
                print("‚úÖ C·ªïng ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng.")
                return True
            except serial.SerialException as e:
                print(f"‚ùå L·ªói khi m·ªü c·ªïng: {e}")
                return False

        elif self.ser and port:
            print("‚ö†Ô∏è C·ªïng ƒë√£ ƒë∆∞·ª£c m·ªü tr∆∞·ªõc ƒë√≥, kh√¥ng m·ªü l·∫°i.")
            return True

        else:
            self.status_connect = False
            print("‚ùå Kh√¥ng t·ªìn t·∫°i port h·ª£p l·ªá.")
            return False

    def connect_com(self):
        if self.serial_com:
            status_open  = self.open_port_external(self.serial_com,
                baudrate=self.baud_rate,
                bytesize=self.byte_size,
                parity=self.parity,
                stopbits=self.stop_bits,
                timeout=self.timeout)
            return status_open
        return False


  
        # else:







    def find_port(self):
        ports = serial.tools.list_ports.comports()
        for port in ports:
            # print(port.description)
            if Serial_Com.DEVICE in port.description:
                self.port = port.device
                # print(f"ƒê√£ t√¨m th·∫•y c·ªïng: {self.port}")
                return self.port
        # print("Kh√¥ng t√¨m th·∫•y c·ªïng c·∫ßn t√¨m.")
        return None
        def find_port(self):
        ports = serial.tools.list_ports.comports()
        for port in ports:
            # print(port.description)
            if Serial_Com.DEVICE in port.description:
                self.port = port.device
                # print(f"ƒê√£ t√¨m th·∫•y c·ªïng: {self.port}")
                return self.port
        # print("Kh√¥ng t√¨m th·∫•y c·ªïng c·∫ßn t√¨m.")
        return None
    def get_list_port(self):
        ports = serial.tools.list_ports.comports()
        for port in ports:
            # print(port.description)
            if Serial_Com.DEVICE in port.description:
                self.port = port.device
                # print(f"ƒê√£ t√¨m th·∫•y c·ªïng: {self.port}")
                return self.port
        # print("Kh√¥ng t√¨m th·∫•y c·ªïng c·∫ßn t√¨m.")
        return None
    def open_port(self):
        self.find_port()
        if self.port and self.ser is None:
            try:
                print(f"Ti·∫øn h√†nh m·ªü c·ªïng {self.port}")
                self.ser = serial.Serial(
                    port=self.port,
                    baudrate=Serial_Com.BAUDRATE,
                    bytesize=Serial_Com.BYTESIZE,
                    parity=Serial_Com.PARITY,
                    stopbits=Serial_Com.STOPBITS,
                    timeout=Serial_Com.TIMEOUT,
                )
                self.status_connect = True   # ‚úÖ ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG
                print("C·ªïng ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng.")
            except:
                self.status_connect = False  # ‚ùå M·ªû C·ªîNG L·ªñI
                print("M·ªü c·ªïng b·ªã l·ªói")
        elif self.ser and self.port:
            self.status_connect = True 
            print("C·ªïng Ser v√† Port ƒëang m·ªü kh√¥ng m·ªü l·∫°i")
            return True 
        if self.port is None and self.ser is None: 
            self.status_connect = False      # ‚ùå KH√îNG T·ªíN T·∫†I C·ªîNG
            print("Kh√¥ng t·ªìn t·∫°i Port v√† Ser ƒë·ªÅu t·∫Øt")   
        else:
            self.status_connect = False
            print("C·ªïng kh√¥ng t·ªìn t·∫°i ")

    def send_data(self, data):
        if self.ser and self.ser.is_open:
            try:
                data_to_send = f"{data}\n".encode('utf-8')  
                self.ser.write(data_to_send)
                print(f"PC   :{data}")
                now = time.time()
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(now))
                ms = int((now - int(now)) * 1000)
                print("Th·ªùi gian g·ª≠i l·ªánh send tr·ª±c ti·∫øp",f"{timestamp}.{ms:03d}")
            except serial.SerialException as e:
                print("L·ªói khi g·ª≠i d·ªØ li·ªáu: {e}")
        else:
            print("C·ªïng kh√¥ng t·ªìn t·∫°i 2")

    def receive_data(self):
        if self.ser and self.ser.is_open:
            if self.ser.in_waiting > 0:
                data = self.ser.readline().decode('utf-8', errors='ignore').strip()
                print(f"ESP32:{data}")
                now = time.time()
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(now))
                ms = int((now - int(now)) * 1000)
                print("Th·ªùi gian nh·∫≠n data receive tr·ª±c ti·∫øp ",f"{timestamp}.{ms:03d}")
                return data
            else:
                return None
        else:
            print("C·ªïng kh√¥ng t·ªìn t·∫°i 3")
            return False
    def close_port(self):
        if self.ser and self.ser.is_open:
            try:
                self.ser.close()
                self.status_connect = False   # ‚úÖ ƒê√ìNG C·ªîNG ‚Üí M·∫§T K·∫æT N·ªêI
                self.ser = None 
                self.port = None        
                print(f"C·ªïng ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")
            except serial.SerialException as e:
                self.status_connect = False
                print(f"L·ªói khi ƒë√≥ng c·ªïng: {e}")
        else:
            self.status_connect = False       # ‚ùå KH√îNG T·ªíN T·∫†I ‚Üí CH·∫ÆC CH·∫ÆN M·∫§T K·∫æT N·ªêI
            print("C·ªïng kh√¥ng t·ªìn t·∫°i 4")

    def get_port_info(self):
        if self.ser and self.ser.is_open:
            info = {
                "port": self.ser.port,
                "baudrate": self.ser.baudrate,
                "bytesize": self.ser.bytesize,
                "parity": self.ser.parity,
                "stopbits": self.ser.stopbits,
                "timeout": self.ser.timeout
            }
            return info
        else:
            print("Ch∆∞a m·ªü c·ªïng ho·∫∑c c·ªïng kh√¥ng t·ªìn t·∫°i.")
            return None
    def show_port_info(self):
        ports = serial.tools.list_ports.comports()
        if not ports:
            print("Kh√¥ng c√≥ c·ªïng COM n√†o ƒë∆∞·ª£c k·∫øt n·ªëi.")
            return
        print("Danh s√°ch c√°c c·ªïng COM ƒëang k·∫øt n·ªëi:")
        for port in ports:
            print(f"‚û§ T√™n c·ªïng     : {port.device}")
            print(f"   M√¥ t·∫£       : {port.description}")
            print(f"   VID:PID     : {port.vid}:{port.pid}")
            print(f"   T√™n chip    : {port.name}")
            print(f"   ƒê·ªãa ch·ªâ HW  : {port.hwid}")
            print("-" * 40)
  

    def try_connect(self):
        if not self.status_connect:
            self.open_port()
        if self.status_connect:           # ‚úÖ KI·ªÇM TRA TR·∫†NG TH√ÅI
                print(self.get_port_info())
                print("K·∫øt n·ªëi th√†nh c√¥ng")
        else:
                print("K·∫øt n·ªëi th·∫•t b·∫°i")
serial_com = Serial_Com()
# folder = Create()
# path= folder.create_file_in_folder_two("config.json","CONFIG")
# data = {
#   "device_name": "Serial Device",    
#   "baudrate": 115200,               
#   "bytesize": 8,                       
#   "parity": "N",                        
#   "stopbits": 1,                      
#   "timeout": 1.0,                     
#   "reconnect_interval": 1.0            
# }
# folder.write_json_to_file(path,data)
# # serial_com.try_connect()
# try:
#     serial_com.find_port()
#     serial_com.open_port()
#     serial_com.send_data("200OK")
#     serial_com.receive_data()
#     serial_com.show_port_info()
#     serial_com.get_port_info()
#     serial_com.close_port()
# except Exception as e:
#     print(f"L·ªói: {e}")
# except KeyboardInterrupt as e:
#     print("thoat chuong trinh")
